package org.ual.hmis.Group_19_KacperDawid;// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import com.gargoylesoftware.htmlunit.BrowserVersion;

public class TestEditToAlreadyExistingTestTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    // Browser selector
    int browser= 0; // 0: firefox, 1: chrome,...
    Boolean headless = true;
//    HtmlUnitDriver driver = new HtmlUnitDriver(true);

    switch (browser) {
      case 0:

        System.setProperty("webdriver.gecko.driver", "drivers/geckodriver-v0.33.0-win-aarch64/geckodriver.exe");
        FirefoxOptions firefoxOptions = new FirefoxOptions();
        if (headless) firefoxOptions.setHeadless(headless);
        driver = new HtmlUnitDriver(BrowserVersion.FIREFOX_38, true);

        break;
      case 1:

        System.setProperty("webdriver.chrome.driver", "drivers/chromedriver_win32/chromedriver.exe");
        ChromeOptions chromeOptions = new ChromeOptions();
        if (headless) chromeOptions.setHeadless(headless);
        chromeOptions.addArguments("window-size=1920,1080");
        driver = new HtmlUnitDriver(BrowserVersion.CHROME, true);

        break;

      default:
        fail("Please select a browser");
        break;
    }
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void testEditToAlreadyExistingTest() {
    // Test name: testEditToAlreadyExistingTest
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/#/Home | 
    driver.get("http://localhost:8080/#/Home");
    // 2 | waitForElementVisible | xpath=(//a[contains(text(),'Todo List')]) | 30000
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//a[contains(text(),\'Todo List\')])")));
    }
    // 3 | setWindowSize | 1070x808 | 
    driver.manage().window().setSize(new Dimension(1070, 808));
    // 4 | click | xpath=(//a[contains(text(),'Todo List')])[2] | 
    driver.findElement(By.xpath("(//a[contains(text(),\'Todo List\')])[2]")).click();
    // 5 | click | xpath=//ul[@id='todolist']/div[6]/div/button | 
    driver.findElement(By.xpath("//ul[@id=\'todolist\']/div[6]/div/button")).click();
    // 6 | click | xpath=//ul[@id='todolist']/div[6] | 
    driver.findElement(By.xpath("//ul[@id=\'todolist\']/div[6]")).click();
    // 7 | click | xpath=//ul[@id='todolist']/div[6]/div[2]/input | 
    driver.findElement(By.xpath("//ul[@id=\'todolist\']/div[6]/div[2]/input")).click();
    // 8 | type | css=.ng-dirty | abcc
    driver.findElement(By.cssSelector(".ng-dirty")).sendKeys("abcc");
    // 9 | click | xpath=//ul[@id='todolist']/div[6]/div[2]/span/button | 
    driver.findElement(By.xpath("//ul[@id=\'todolist\']/div[6]/div[2]/span/button")).click();
  }
}
